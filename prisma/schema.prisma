// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role{
  CUSTOMER
  BUSINESS
}


model User {
  id                    String     @id @default(uuid())
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  password              String?    @map("password")
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  sessions              Session[]
  role                  Role?

  customerDetails CustomerDetails?
  businessDetails BusinessDetails?

  @@map("users")
}

model CustomerDetails {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String  @map("user_id") @unique
  appointments  Appointment[] @relation("customer_appointments")

  @@map("customer_details")
}

model BusinessDetails {
  id           String   @id @default(uuid())
  user         User     @relation(fields : [userId], references: [id])
  userId       String @map("user_id") @unique
  businessName String @map("business_name")
  address      String
  phone        String
  workingHours String @map("working_hours")
  description  String
  services     Service[] @relation("business_services")
    appointments Appointment[] @relation("business_appointments")

  @@map("business_details")
}

model Service {
  id           String   @id @default(uuid())
  business     BusinessDetails @relation("business_services", fields: [businessId], references: [id], onDelete: Cascade)
  businessId   String @map("business_id")
  name         String
  description  String
  price        Float
  duration     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  appointments Appointment[] @relation("service_appointments")

  @@map("services")
}

enum AppointmentStatus{
  PENDING_BUSINESS
  PENDING_CUSTOMER
  CONFIRMED
  CANCELLED
}

model Appointment {
  id           String   @id @default(uuid())
  customer     CustomerDetails @relation("customer_appointments", fields: [customerId], references: [id], onDelete: Cascade)
  customerId   String @map("customer_id")
  business     BusinessDetails @relation("business_appointments", fields: [businessId], references: [id], onDelete: Cascade)
  businessId   String @map("business_id")
  service      Service @relation("service_appointments", fields: [serviceId], references: [id] ) 
  serviceId    String @map("service_id")
  date         DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status       AppointmentStatus

  @@map("appointments")
}

model Account {
  id                 String    @id @default(cuid())
  userId              String    @map("user_id")
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String? @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @db.Text @map("session_token") @unique
  accessToken  String?  @db.Text @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}