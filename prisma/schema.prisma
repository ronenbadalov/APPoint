generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String?          @unique
  emailVerified   DateTime?        @map("email_verified")
  image           String?
  password        String?          @map("password")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  role            Role?
  accounts        Account[]
  businessDetails BusinessDetails?
  customerDetails CustomerDetails?
  sessions        Session[]

  @@map("users")
}

model CustomerDetails {
  id           String        @id @default(uuid())
  userId       String        @unique @map("user_id")
  appointments Appointment[] @relation("customer_appointments")
  user         User          @relation(fields: [userId], references: [id])

  @@map("customer_details")
}

model BusinessDetails {
  id           String         @id @default(uuid())
  userId       String         @unique @map("user_id")
  businessName String         @map("business_name")
  address      String
  phone        String
  imageUrl     String? @map("image_url")
  description  String?
  latitude     Float?
  longitude    Float?
  appointments Appointment[]  @relation("business_appointments")
  user         User           @relation(fields: [userId], references: [id])
  services     Service[]      @relation("business_services")
  workingHours WorkingHours[] @relation("business_working_hours")

  @@map("business_details")
}

model Service {
  id           String          @id @default(uuid())
  businessId   String          @map("business_id")
  name         String
  description  String
  price        Float
  duration     Int
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  appointments Appointment[]   @relation("service_appointments")
  business     BusinessDetails @relation("business_services", fields: [businessId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Appointment {
  id         String            @id @default(uuid())
  customerId String            @map("customer_id")
  businessId String            @map("business_id")
  serviceId  String            @map("service_id")
  date       DateTime
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  status     AppointmentStatus
  business   BusinessDetails   @relation("business_appointments", fields: [businessId], references: [id], onDelete: Cascade)
  customer   CustomerDetails   @relation("customer_appointments", fields: [customerId], references: [id], onDelete: Cascade)
  service    Service           @relation("service_appointments", fields: [serviceId], references: [id])

  @@map("appointments")
}

model WorkingHours {
  id         String          @id @default(uuid())
  businessId String          @map("business_id")
  day        Int
  startTime  DateTime?       @map("start_time")
  endTime    DateTime?       @map("end_time")
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  isClosed   Boolean?        @map("is_closed")
  business   BusinessDetails @relation("business_working_hours", fields: [businessId], references: [id], onDelete: Cascade)

  @@map("working_hours")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum Role {
  CUSTOMER
  BUSINESS
}

enum AppointmentStatus {
  PENDING_BUSINESS
  PENDING_CUSTOMER
  CONFIRMED
  CANCELLED
}
